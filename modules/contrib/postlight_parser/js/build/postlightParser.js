!function(e,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define([],r):"object"==typeof exports?exports.CKEditor5=r():(e.CKEditor5=e.CKEditor5||{},e.CKEditor5.postlightParser=r())}(self,(()=>(()=>{var __webpack_modules__={"./js/ckeditor5_plugins/postlightParser/src/PostlightParser.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (/* binding */ PostlightParser)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ "ckeditor5/src/core.js");\n/* harmony import */ var _UrlParserUI__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./UrlParserUI */ "./js/ckeditor5_plugins/postlightParser/src/UrlParserUI.js");\n/* harmony import */ var _UrlParserEditing__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UrlParserEditing */ "./js/ckeditor5_plugins/postlightParser/src/UrlParserEditing.js");\n/**\n * @file The build process always expects an index.js file. Anything exported\n * here will be recognized by CKEditor 5 as an available plugin. Multiple\n * plugins can be exported in this one file.\n *\n * I.e. this file\'s purpose is to make plugin(s) discoverable.\n */\n// cSpell:ignore PostlightParser\n\n\n\n\n\nclass PostlightParser extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  /**\n   * @inheritdoc\n   */\n  static get requires() {\n    return [_UrlParserEditing__WEBPACK_IMPORTED_MODULE_2__["default"], _UrlParserUI__WEBPACK_IMPORTED_MODULE_1__["default"]];\n  }\n\n  /**\n   * @inheritdoc\n   */\n  static get pluginName() {\n    return \'urlParser\';\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.postlightParser/./js/ckeditor5_plugins/postlightParser/src/PostlightParser.js?')},"./js/ckeditor5_plugins/postlightParser/src/UrlParserEditing.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ UrlParserEditing)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/widget */ \"ckeditor5/src/widget.js\");\n/* harmony import */ var _inserturlcommand__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./inserturlcommand */ \"./js/ckeditor5_plugins/postlightParser/src/inserturlcommand.js\");\n\n\n\n\n// cSpell:ignore UrlParser inserturlcommand\n\n/**\n * CKEditor 5 plugins do not work directly with the DOM. They are defined as\n * plugin-specific data models that are then converted to markup that\n * is inserted in the DOM.\n *\n * CKEditor 5 internally interacts with simpleBox as this model:\n * <simpleBox>\n *    <simpleBoxTitle></simpleBoxTitle>\n *    <simpleBoxDescription></simpleBoxDescription>\n * </simpleBox>\n *\n * Which is converted for the browser/user as this markup\n * <section class=\"simple-box\">\n *   <h2 class=\"simple-box-title\"></h1>\n *   <div class=\"simple-box-description\"></div>\n * </section>\n *\n * This file has the logic for defining the simpleBox model, and for how it is\n * converted to standard DOM markup.\n */\nclass UrlParserEditing extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  static get requires() {\n    return [ckeditor5_src_widget__WEBPACK_IMPORTED_MODULE_1__.Widget];\n  }\n\n  init() {\n    this._defineSchema();\n    this._defineConverters();\n    this._defineCommands();\n  }\n\n  _defineSchema() {\n    // Schemas are registered via the central `editor` object.\n    const schema = this.editor.model.schema;\n\n    schema.register('urlParser', {\n      // Behaves like a self-contained object (e.g. an image).\n      isObject: true,\n      // Allow in places where other blocks are allowed (e.g. directly in the root).\n      allowWhere: '$text',\n      isInline: true,\n      allowAttributes: ['class'],\n    });\n  }\n\n  /**\n   * Converters determine how CKEditor 5 models are converted into markup and\n   * vice-versa.\n   */\n  _defineConverters() {\n    // Converters are registered via the central editor object.\n    const { conversion } = this.editor;\n    // Data Downcast Converters: converts stored model data into HTML.\n    // These trigger when content is saved.\n    //\n    // Instances of <urlParser> are saved as\n    // <div class=\"simple-box\">{{inner content}}</div>.\n    conversion.for('downcast').elementToElement({\n      model: 'urlParser',\n      view: {\n        name: 'div',\n        classes: 'url-parser',\n      },\n    });\n\n    // Upcast Converters: determine how existing HTML is interpreted by the\n    // editor. These trigger when an editor instance loads.\n    //\n    // If <div class=\"urlparser\"> is present in the existing markup\n    // processed by CKEditor, then CKEditor recognizes and loads it as a\n    // <urlParser> model.\n    conversion.for('upcast').elementToElement({\n      model: 'urlParser',\n      view: {\n        name: 'div',\n        classes: 'url-parser',\n      },\n    });\n  }\n\n  _defineCommands() {\n    const editor = this.editor;\n    editor.commands.add(\n      'InsertUrlCommand',\n      new _inserturlcommand__WEBPACK_IMPORTED_MODULE_2__[\"default\"](this.editor),\n    );\n  }\n}\n\n\n//# sourceURL=webpack://CKEditor5.postlightParser/./js/ckeditor5_plugins/postlightParser/src/UrlParserEditing.js?")},"./js/ckeditor5_plugins/postlightParser/src/UrlParserIcon-view.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ UrlParserIconView)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n\n\n\n/**\n * A class rendering the information required from user input.\n *\n * @extends module:ui/view~View\n *\n * @internal\n */\nclass UrlParserIconView extends ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.View {\n\n  /**\n   * @inheritdoc\n   */\n  constructor(editor) {\n    const locale = editor.locale;\n    super(locale);\n\n    this.urlInputView = this._createInput(editor.t('Url to get content'));\n\n    // Create the save and cancel buttons.\n    this.saveButtonView = this._createButton(\n      editor.t('Save'), ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__.icons.check, 'ck-button-save'\n    );\n    this.saveButtonView.type = 'submit';\n\n    this.cancelButtonView = this._createButton(\n      editor.t('Cancel'), ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_1__.icons.cancel, 'ck-button-cancel'\n    );\n    // Delegate ButtonView#execute to FormView#cancel.\n    this.cancelButtonView.delegate('execute').to(this, 'cancel');\n\n    this.childViews = this.createCollection([\n      this.urlInputView,\n      this.saveButtonView,\n      this.cancelButtonView\n    ]);\n\n    this.setTemplate({\n      tag: 'form',\n      attributes: {\n        class: ['ck', 'ck-responsive-form', 'ck-link-form'],\n        tabindex: '-1'\n      },\n      children: this.childViews\n    });\n  }\n\n  /**\n   * @inheritdoc\n   */\n  render() {\n    super.render();\n    // Submit the form when the user clicked the save button or\n    // pressed enter the input.\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.submitHandler)({\n      view: this\n    });\n  }\n\n  /**\n   * @inheritdoc\n   */\n  focus() {\n    this.childViews.first.focus();\n  }\n\n  // Create a generic input field.\n  _createInput(label) {\n    const labeledInput = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.LabeledFieldView(this.locale, ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.createLabeledInputText);\n    labeledInput.label = label;\n    labeledInput.inputMode = 'url';\n    return labeledInput;\n  }\n\n  // Create a generic button.\n  _createButton(label, icon, className) {\n    const button = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_0__.ButtonView();\n\n    button.set({\n      label,\n      icon,\n      tooltip: true,\n      class: className,\n    });\n\n    return button;\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.postlightParser/./js/ckeditor5_plugins/postlightParser/src/UrlParserIcon-view.js?")},"./js/ckeditor5_plugins/postlightParser/src/UrlParserUI.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ UrlParserUI)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/* harmony import */ var ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ckeditor5/src/ui */ \"ckeditor5/src/ui.js\");\n/* harmony import */ var _UrlParserIcon_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./UrlParserIcon-view */ \"./js/ckeditor5_plugins/postlightParser/src/UrlParserIcon-view.js\");\n/* harmony import */ var _icons_url_parser_svg__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../../icons/url-parser.svg */ \"./icons/url-parser.svg\");\n/**\n * @file registers the bootstrapIcons toolbar button and binds functionality to it.\n */\n\n\n\n\n\n\nclass UrlParserUI extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Plugin {\n  init() {\n    const editor = this.editor;\n    this._balloon = this.editor.plugins.get(ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ContextualBalloon);\n    this.formView = this._createFormView();\n\n    // This will register the UrlParserIcons toolbar button.\n    editor.ui.componentFactory.add('urlParser', (locale) => {\n      const buttonView = new ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.ButtonView(locale);\n\n      // Create the toolbar button.\n      buttonView.set({\n        label: editor.t('Url get content'),\n        icon: _icons_url_parser_svg__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n        tooltip: true,\n      });\n\n      // Bind the state of the button to the command.\n      const command = editor.commands.get('InsertUrlCommand');\n      buttonView.bind('isOn', 'isEnabled').to(command, 'value', 'isEnabled');\n\n      // Execute the command when the button is clicked (executed).\n      this.listenTo(buttonView, 'execute', () => {\n        this._showUI();\n      });\n\n      return buttonView;\n    });\n\n  }\n\n  _createFormView() {\n    const editor = this.editor;\n    const formView = new _UrlParserIcon_view__WEBPACK_IMPORTED_MODULE_2__[\"default\"](editor);\n\n    // On submit send the user data to the writer, then hide the form view.\n    this.listenTo(formView, 'submit', () => {\n      let url = formView.urlInputView.fieldView.element.value;\n      editor.execute('InsertUrlCommand', url);\n      this._hideUI();\n    });\n\n    // Hide the form view after clicking the \"Cancel\" button.\n    this.listenTo(formView, 'cancel', () => {\n      this._hideUI();\n    });\n\n    // Hide the form view when clicking outside the balloon.\n    (0,ckeditor5_src_ui__WEBPACK_IMPORTED_MODULE_1__.clickOutsideHandler)({\n      emitter: formView,\n      activator: () => this._balloon.visibleView === formView,\n      contextElements: [this._balloon.view.element],\n      callback: () => this._hideUI()\n    });\n\n    return formView;\n  }\n\n  _hideUI() {\n    this.formView.urlInputView.fieldView.value = '';\n    this.formView.element.reset();\n    this._balloon.remove(this.formView);\n\n    // Focus the editing view after closing the form view.\n    this.editor.editing.view.focus();\n  }\n\n  _showUI() {\n    this._balloon.add({\n      view: this.formView,\n      position: this._getBalloonPositionData(),\n    });\n    this.formView.focus();\n  }\n\n  _getBalloonPositionData() {\n    const view = this.editor.editing.view;\n    const viewDocument = view.document;\n    let target = null;\n\n    // Set a target position by converting view selection range to DOM.\n    target = () => view.domConverter.viewRangeToDom(\n      viewDocument.selection.getFirstRange()\n    );\n\n    return {\n      target\n    };\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.postlightParser/./js/ckeditor5_plugins/postlightParser/src/UrlParserUI.js?")},"./js/ckeditor5_plugins/postlightParser/src/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _PostlightParser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PostlightParser */ "./js/ckeditor5_plugins/postlightParser/src/PostlightParser.js");\n/**\n * @file The build process always expects an index.js file. Anything exported\n * here will be recognized by CKEditor 5 as an available plugin. Multiple\n * plugins can be exported in this one file.\n *\n * I.e. this file\'s purpose is to make plugin(s) discoverable.\n */\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({ PostlightParser: _PostlightParser__WEBPACK_IMPORTED_MODULE_0__["default"] });\n\n\n//# sourceURL=webpack://CKEditor5.postlightParser/./js/ckeditor5_plugins/postlightParser/src/index.js?')},"./js/ckeditor5_plugins/postlightParser/src/inserturlcommand.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ InsertUrlCommand)\n/* harmony export */ });\n/* harmony import */ var ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ckeditor5/src/core */ \"ckeditor5/src/core.js\");\n/**\n * @file defines InsertBootstrapIconsCommand, which is executed when the icon\n * toolbar button is pressed.\n */\n// cSpell:ignore urlParser\n\n\n\nclass InsertUrlCommand extends ckeditor5_src_core__WEBPACK_IMPORTED_MODULE_0__.Command {\n  execute(url) {\n    const { editor } = this;\n    const { model } = editor;\n    const config = this.editor.config.get('url_parser');\n    url = config['endpoint'] + '?url=' + url;\n    if(config['save_image']) {\n      url += '&save_image=' + config['save_image'];\n    }\n    fetch(url).then(function (response) {\n      if (!response.ok) {\n        throw new Error('Request error: ' + response.status);\n      }\n      return response.json();\n    }).then(function (data) {\n      model.change(writer => {\n        const content = writer.createElement('urlParser');\n        const docFrag = writer.createDocumentFragment();\n        const viewFragment = editor.data.processor.toView(data.content);\n        const modelFragment = editor.data.toModel(viewFragment);\n        writer.append(content, docFrag);\n        writer.append(modelFragment, content);\n        model.insertContent(docFrag);\n      });\n    });\n  }\n\n  refresh() {\n    const {model} = this.editor;\n    const {selection} = model.document;\n\n    // Determine if the cursor (selection) is in a position where adding a\n    // simpleBox is permitted. This is based on the schema of the model(s)\n    // currently containing the cursor.\n    const allowedIn = model.schema.findAllowedParent(\n      selection.getFirstPosition(),\n      'urlParser',\n    );\n\n    // If the cursor is not in a location where a simpleBox can be added, return\n    // null so the addition doesn't happen.\n    this.isEnabled = allowedIn !== null;\n  }\n\n}\n\n\n//# sourceURL=webpack://CKEditor5.postlightParser/./js/ckeditor5_plugins/postlightParser/src/inserturlcommand.js?")},"./icons/url-parser.svg":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ("<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\n<svg viewBox=\\"0 0 16 16\\" xmlns=\\"http://www.w3.org/2000/svg\\">\\n  <path style=\\"line-height: normal; text-indent: 0px; text-align: start; text-decoration-line: none; text-decoration-style: solid; text-decoration-color: rgb(0, 0, 0); text-transform: none; isolation: auto; mix-blend-mode: normal;\\" d=\\"M 3.031 0.051 C 2.063 0.051 1.268 0.847 1.268 1.815 L 1.268 12.396 C 1.268 13.364 2.063 14.159 3.031 14.159 L 8.322 14.159 L 8.322 12.984 L 3.031 12.984 C 2.701 12.984 2.444 12.727 2.444 12.396 L 2.444 1.815 C 2.444 1.484 2.701 1.227 3.031 1.227 L 11.26 1.227 C 11.591 1.227 11.849 1.484 11.849 1.815 L 11.849 8.281 L 13.024 8.281 L 13.024 1.815 C 13.024 0.847 12.229 0.051 11.26 0.051 L 3.031 0.051 Z M 5.913 3.634 C 5.264 3.634 4.738 4.161 4.738 4.81 C 4.738 5.46 5.264 5.986 5.913 5.986 C 6.562 5.986 7.09 5.46 7.09 4.81 C 7.09 4.161 6.562 3.634 5.913 3.634 Z M 5.913 5.986 C 4.617 5.986 3.561 7.041 3.561 8.337 L 8.264 8.337 C 8.264 7.041 7.21 5.986 5.913 5.986 Z M 9.439 4.81 L 9.439 5.986 L 10.616 5.986 L 10.616 4.81 L 9.439 4.81 Z M 9.439 7.162 L 9.439 8.337 L 10.616 8.337 L 10.616 7.162 L 9.439 7.162 Z M 3.531 1.751 L 3.531 2.925 L 10.585 2.925 L 10.585 1.751 L 3.531 1.751 Z M 11.849 9.457 L 11.849 10.045 L 11.849 12.984 L 9.498 12.984 L 11.849 15.335 L 12.437 15.923 L 13.024 15.335 L 15.376 12.984 L 13.024 12.984 L 13.024 10.045 L 13.024 9.457 L 11.849 9.457 Z M 3.501 9.136 L 3.501 10.311 L 10.554 10.311 L 10.554 9.136 L 3.501 9.136 Z\\"/>\\n  <path style=\\"line-height:normal;text-indent:0;text-align:start;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000;text-transform:none;block-progression:tb;isolation:auto;mix-blend-mode:normal\\" d=\\"M 3.526 11.121 L 3.526 12.121 L 10.59 12.121 L 10.59 11.121 L 3.526 11.121 Z\\"/>\\n</svg>");\n\n//# sourceURL=webpack://CKEditor5.postlightParser/./icons/url-parser.svg?')},"ckeditor5/src/core.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/core.js");\n\n//# sourceURL=webpack://CKEditor5.postlightParser/delegated_./core.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/ui.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/ui.js");\n\n//# sourceURL=webpack://CKEditor5.postlightParser/delegated_./ui.js_from_dll-reference_CKEditor5.dll?')},"ckeditor5/src/widget.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('module.exports = (__webpack_require__(/*! dll-reference CKEditor5.dll */ "dll-reference CKEditor5.dll"))("./src/widget.js");\n\n//# sourceURL=webpack://CKEditor5.postlightParser/delegated_./widget.js_from_dll-reference_CKEditor5.dll?')},"dll-reference CKEditor5.dll":e=>{"use strict";e.exports=CKEditor5.dll}},__webpack_module_cache__={};function __webpack_require__(e){var r=__webpack_module_cache__[e];if(void 0!==r)return r.exports;var n=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](n,n.exports,__webpack_require__),n.exports}__webpack_require__.d=(e,r)=>{for(var n in r)__webpack_require__.o(r,n)&&!__webpack_require__.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:r[n]})},__webpack_require__.o=(e,r)=>Object.prototype.hasOwnProperty.call(e,r),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./js/ckeditor5_plugins/postlightParser/src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()));