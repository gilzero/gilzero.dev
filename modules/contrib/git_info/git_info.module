<?php

/**
 * @file
 * Contains git_info.module..
 */

use Drupal\Core\Cache\Cache;
use Drupal\Core\Render\BubbleableMetadata;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\git_info\GitInfoInterface;

/**
 * Implements hook_help().
 */
function git_info_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the git_info module.
    case 'help.page.git_info':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Git Info') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_token_info().
 */
function git_info_token_info() {
  foreach (['shorthash', 'version', 'date', 'app-version'] as $name) {
    $t_param = [
      '@name' => $name,
    ];
    $site["git-$name"] = [
      'name' => t('Git @name', $t_param),
      'description' => t('The @name of the application git revision', $t_param),
    ];
  }
  return [
    'tokens' => ['site' => $site],
  ];
}

/**
 * Implements hook_tokens().
 */
function git_info_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];

  foreach ($tokens as $name => $original) {
    switch ($name) {
      case 'git-shorthash':
        $replacements[$original] = \Drupal::service('git_info.git_info')
          ->getShortHash();
        break;

      case 'git-version':
        $replacements[$original] = \Drupal::service('git_info.git_info')
          ->getVersion();
        break;

      case 'git-date':
        $replacements[$original] = \Drupal::service('git_info.git_info')
          ->getRfc3339Date();
        break;

      case 'git-app-version':
        $replacements[$original] = \Drupal::service('git_info.git_info')
          ->getApplicationVersionString();
        break;
    }
  }
  return $replacements;

}

/**
 * Implements hook_cron().
 */
function git_info_cron() {
  $state = \Drupal::state();
  $stored_hash = $state->get(GitInfoInterface::STATE_KEY);
  /** @var \Drupal\git_info\GitInfo $git_info */
  $git_info = \Drupal::service('git_info.git_info');
  $current_hash = $git_info->getShortHash();
  if ($current_hash === $stored_hash) {
    return;
  }
  $state->set(GitInfoInterface::STATE_KEY, $current_hash);
  Cache::invalidateTags([
    GitInfoInterface::CACHE_TAG,
  ]);
}
